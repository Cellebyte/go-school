# Golang Dev Workshop
Go for software developers
Tags: go, teaching, dev
Summary: German Golang workshop slides.

Matthias Bruns
Freelancer
info@matthiasbruns.com
https://github.com/matthiasbruns
https://www.linkedin.com/in/matthiasbruns/

## Basic Course 1st day

## Chapter 1 - Memory Management

## Stack vs Heap

* The available memory of a program is divided into two parts
  * **Stack:**, per thread & goroutine; holds a continues list of jump addresses and data  
    * **short-lived** & **fixed-sized**, that do not leave the frame/scope, access LiFo
  * **Heap:** holds variables, that are shared throughout the program as well as dynamically sized data
    * can be access randomly
    * housekeeping like defragmenting and garbage collecting is required in Go

.image stack_vs_heap.jpg  225 425

## Variable allocations 

* **`main`** has local variables **`n`** & **`n2`**
* **`main`** function assigned to own stack frame, same for **`square`**

.image examples/01_memory/stack_01.jpg _ 700

## Variable allocations II

* square is called and **`n2`** is set to `16`
* square's stackframe is not removed but marked as invalid/unnused

.image examples/01_memory/stack_02.jpg _ 700

## Variable allocations III

* **`Println`** is called and the unused stack frame of **`square`** is consumed/replaced by the Println call
  * has the same memory address as the unnused stack frame before

.image examples/01_memory/stack_03.jpg _ 700

## Pointer allocations

* **`main`** has a local variable **`n`** and sends a pointer of n into the function **`inc`**
* **`main`** function assigned to own stack frame, same for **`inc`**

.image examples/01_memory/stack_04.jpg _ 700

## Pointer allocations II

* function **`inc`** dereferences the pointer and increments the value
* stack frame of **`inc`** is again unused/invalid 

.image examples/01_memory/stack_05.jpg _ 700

## Pointer allocations III

* function **`Println`** runs
  * acquires the memory that was freed up by the inc function as shown in the below figure

.image examples/01_memory/stack_06.jpg _ 700

## Why is n not on the heap?

.play examples/01_memory/example.go /^//START_1/,/^//END_1/ HL1

* *Sharing down* of the variables (passing references) typically stays on the stack

*This is because, the GO Compiler takes the decision whether a referenced variable needs to stay on the stack or on the heap.*

## How to detect allocations?

Use "`go build -gcflags '-m -l'`" to see allocations for the entry file of a program
>

```
cmd/server/main.go:9:12: ... argument does not escape
cmd/server/main.go:9:13: "Starting server" escapes to heap
```
>
----
Use benchmark tests on a unit-test level to get allocations of each function
>

```
func BenchmarkIntMin(b *testing.B) { 
	for i := 0; i < b.N; i++ {
		IntMin(1, 2)
	}
}
```

might output:

```
BenchmarkTBHelper-10              560562               214.3 ns/op             0 B/op          0 allocs/op
```

## Pointer in Heap

* So we have a function main that has a variable n who's value is assigned by a function answer which returns a pointer to it's local variable. This is how the stack frame allocation is done initially for both the functions

.image examples/01_memory/stack_07.jpg _ 700

## Pointer in Heap II

* Now when the function answer executes and returns the pointer, the address for x is assigned to the variable n in the main function and the answer function's stack frame gets freed up (unused)

.image examples/01_memory/stack_08.jpg _ 700

We have a problem here, we have a pointer pointing down to the unused (invalid memory) in the stack. But how is that a problem?

Let us see what happens when the Println function is called.

## Pointer in Heap III

* Println function takes the space freed up by the answer function (notice the memory address) and takes reference to the returned value and divides it by 2 (making it 21)

.image examples/01_memory/stack_09.jpg _ 600

* This is the problem here, the value which n was pointing to (which was originally 42) has been overwritten by the Println call which made it 21. And since Println took over the memory address of answer function (after answer function freed up the space), now that memory has the value 21 (instead of 42)

## Pointer in Heap IV

* Compiler knows it was NOT safe to leave the pointer variable on the stack. So what it does is, it declares x (from the answer function) somewhere on the Heap

.image examples/01_memory/stack_10.jpg _ 600

This means when the Println function is called, which changes the value to half, it will not clobber the value of x. This is called Escaping To The Heap which is done during the compile time.

Therefore, sharing up (returning pointers) typically escapes to the Heap.

## Chapter 2 - HTTP

## HTTP Server

.play examples/02_http/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

* Spins up a http server with two routes
  * http://localhost:8090/hello
  * http://localhost:8090/headers
* Allows all methods: GET, POST, ....

## Request methods
* Enfore a certain http method by checking the incoming request

.code examples/02_http/method.go HL1

* There are great web libraries to improve the standard http package of Go

## Starting the server

* http.ListenAndServe(":8090", nil) 
  * Starts the http server and listens on port 8090
  * Why is the handler set to **`nil`**?
  * "The handler is usually nil, which means to use DefaultServeMux" - Go docs

## What is a ServeMux?
  * ServeMux is an HTTP request multiplexer
  * Matches an incomming request against the configured patterns and calls the one that most closely matches the url
  * There are many other ServerMux implementations in the standard lib

## request.Context()

* The Go Context
  * carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes
  * accepts values that you can add to it - e.g. meta data for the current scope
* When a Context is canceled, all Contexts derived from it are also canceled.

.code examples/06_context/excurse.go HL1

## HTTP Client

* Issue an HTTP GET request to a server. 
* **`http.Get`** is a quick way to create an http.Client - uses http.DefaultClient
* Uses `bufio` to read the response data
  * Package bufio implements buffered I/O

.play examples/02_http/cmd/client/main.go /^//START_1/,/^//END_1/ HL1

## http headers

* If you need custom headers for http.Client, instantiate your own 

.code examples/02_http/client.go HL1

## Exercise http Client

* Connect to a server with basic auth protection
* The server can be downloaded here:

[https://github.com/matthiasbruns/go-school/blob/main/dev-course/coding/http/main.go](https://github.com/matthiasbruns/go-school/blob/main/dev-course/coding/http/main.go)
or [https://ref.onl/SdRK2tdm](https://ref.onl/SdRK2tdm)

* Run it with "**`go run main.go`**" & the server will listen on localhost:8090
* Use **`request.SetBasicAuth(username, password)`** before sending the request to **localhost:8090/basic-auth** to set the Authorization header in your request
* You can print the response body to you console with 

```
    bodyBytes, err := io.ReadAll(resp.Body)
    // ..
    bodyString := string(bodyBytes)
    fmt.Println(bodyString)
```

## Result - http Client

*show in IDE*

## Chapter 3 - Parsing

## JSON parsing

* **`encoding/json`** provides functionality for json handling
* you can parse raw json, files, requests or other streams

.code examples/03_json/raw.go HL1

## JSON - Structured data

* "Structured data" refers to data where you know the format beforehand

.code examples/03_json/structured.go /^//START_1/,/^//END_1/ HL1

* Create a struct that mirrors the data you want to parse
* Struct fields must be public in order for unmarshal

.code examples/03_json/structured.go /^//START_2/,/^//END_2/ HL2

* Unmarschal as following

.code examples/03_json/structured.go /^//START_3/,/^//END_3/ HL3

## JSON - Arrays

* Let's look how we can decode a json array

.code examples/03_json/arrays.go /^//START_1/,/^//END_1/ HL1

* Unmarshal it by creating a slice of cars

.code examples/03_json/arrays.go /^//START_2/,/^//END_2/ HL2

## JSON - Nested Objects

* What about nested json objects?

.code examples/03_json/nested.go /^//START_1/,/^//END_1/ HL1

* Create corresponding structs

.code examples/03_json/nested.go /^//START_2/,/^//END_2/ HL2

## JSON - Nested Objects II

* Unmarshal json data into struct and nested struct

.code examples/03_json/nested.go /^//START_3/,/^//END_3/ HL3

## JSON - JSON tags

* Go maps attribute names to case-insensitive json names
* If you want to map attributes to different names, use **`json tags`**

.code examples/03_json/tags.go /^//START_1/,/^//END_1/ HL1

* **`carType`** should be mapped to **`Type`**
* **`doorsCount`** should be mapped to **`Doors`**

.code examples/03_json/tags.go /^//START_2/,/^//END_2/ HL2

## JSON - Request body

* Parsing a json body from a http.Request
* Use "`json.NewDecoder(r.Body)`" to directly consume the body stream of a request

.code examples/03_json/request.go /^//START_1/,/^//END_1/ HL1

## JSON - Unstructured data

* If you do not know the JSON structure beforehand, you cannot use structs to unmarschal the data
* You can use maps to parse unstructures JSON data
  * Objects and nested objects will be mapped to **`map[string]interface{}`**

.play examples/03_json/cmd/unstructured/main.go /^//START_1/,/^//END_1/ HL1

## JSON - Marschaling data

* Use **`json.Marshal`** to transform structs or maps into json data
* You can use **`omitempty`** to leave out a property completely when empty

.play examples/03_json/cmd/marschal/main.go /^//START_1/,/^//END_1/ HL1

## YAML parsing

* An external package is required to parse YAML files 
> **`go get gopkg.in/yaml.v3`**
* Source code is available at https://github.com/go-yaml/yaml

## YAML parsing II

* Parsing unstructured YAML data may look like this

.code examples/04_yaml/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## YAML parsing III

* Parsing unstructured YAML data may look like this

.code examples/04_yaml/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

## Chapter 4 - SQL

## database/sql package

"Package sql provides a generic interface around SQL (or SQL-like) databases"

* The sql package must be used in conjunction with a database driver
* Supported drivers can be found here 
> https://github.com/golang/go/wiki/SQLDrivers

.code examples/05_sql/import.go HL1

## SQL Interface

* How to connect to a database?

.code examples/05_sql/intro.go /^//START_1/,/^//END_1/ HL1

* How to execute queries?

.code examples/05_sql/intro.go /^//START_2/,/^//END_2/ HL2

## SQL Interface II 

* How to execute queries?

* ExecContext is used for queries where no rows are returned
* result contains the number of rows affected

.code examples/05_sql/intro.go /^//START_2/,/^//END_2/ HL2

## SQL Interface III

* **`QueryContext`** is used to fetch data from the database
* Returns a cursor, which needs to be closed once done

.code examples/05_sql/intro.go /^//START_3/,/^//END_3/ HL3

## SQL Interface IV

* **`QueryRowContext`** is used when you expect only one row as a result (findById)

.code examples/05_sql/intro.go /^//START_4/,/^//END_4/ HL4

* Prepared statements can be created with **`PrepareContext`**

.code examples/05_sql/intro.go /^//START_5/,/^//END_5/ HL5

## SQL Transactions

* Transactions are started with BeginTx

.code examples/05_sql/intro.go /^//START_6/,/^//END_6/ HL6

* `ExecContext`, `QueryContext`, `QueryRowContext` and `PrepareContext` methods already covered can be used in a transaction
* A transaction must end with a call to **`Commit`** or **`Rollback`**

## Connection Pools

* sql.DB already contains a backing connection pool by default
* If you need to change the config
  * **`SetMaxOpenConns`**: sets the maximum number of open connections to the database
  * **`SetMaxIdleConns `**: sets the maximum number of connections in the idle connection pool (default is 2)
  * **`SetConnMaxIdleTime`**: sets the maximum amount of time a connection may be idle
  * **`SetConnMaxLifetime`**: sets the maximum amount of time a connection may be reused

## Example MySQL

* Opens a connection on localhost:3306 to schema goschool with root:mypassword as user:password

.code examples/05_sql/mysql.go HL1

## Live Coding - MySQL

.image coding-gopher.gif

.caption Kirael Art - https://kirael-art.deviantart.com/art/Go-lang-Mascot-458285682


## Chapter 5 - Testing

## Built-In Testing

* Testing is a very important process in developing maintainable software
* Golang has built-in testing support with the **`testing`** package
* A test is defined by
> `func TestSomething(t *testing.T)`

.code examples/07_testing/intro.go /^//START_1/,/^//END_1/ HL1

## Table-Driven Testing

* Some tests may require many input and output Variables
* Instead of copying the tests, Go offers so called "table-driven" tests

.code examples/07_testing/intro.go /^//START_2/,/^//END_2/ HL2

## Benchmark Testing

* The **`testing`** package also provides a way to benchmark implementations
* Benchmark functions start with `Benchmark` not `Test`
* Benchmark functions are run several times by the testing package
* Each benchmark must execute the code under test `b.N` times

> `go test -bench=.`

.code examples/07_testing/intro.go /^//START_3/,/^//END_3/ HL3

## Live Testing

.image testing-gopher.svg

.caption Illustration by Marcus Olsson CC BY-NC-SA 4.0

## Chapter 6 - CLI

## Recap - CLI

* Read args with **`os.Args`**
* The first entry is always the program
* This can be enough to build you own cli tool

.code examples/08_cli/intro.go /^//START_1/,/^//END_1/ HL1

## Recap - CLI libraries

* You could parse flags and values by yourself and validate if the input is correct
* ... but there are libraries for that

## Cli library - Cobra

https://github.com/spf13/cobra

* POSIX-compliant flags
* Nested subcommands
* Global, local and cascading flags
* Intelligent suggestions (app srver... did you mean app server?)
* Automatic help generation for commands and flags
* Automatic help flag recognition of -h, --help, etc.
* Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)

## Cli library - cli

https://github.com/urfave/cli

cli is a simple, fast, and fun package for building command line apps in Go. The goal is to enable developers to write fast and distributable command line applications in an expressive way

.code examples/08_cli/cli.go /^//START_1/,/^//END_1/ HL1

## Cli library - cli II

* If you finish you cli project and want to store it into your $PATH, you can either
  * compile it with **`go build`** and move the compiled binary into your path
  * install any Go project into your **`$GOPATH/bin`** with **`go install`**

* How to read args in cli?

.code examples/08_cli/cli.go /^//START_2/,/^//END_2/ HL2

## Cli library - cli Flags

* You can define flags with defaults and read their values
* Call **`c.String("lang")`** on **`cli.Context`** to get mapped flag args

.code examples/08_cli/cli.go /^//START_3/,/^//END_3/ HL3


## Cli library - cli Flags II

* You can also define a destination where the flag should be stored in

.code examples/08_cli/cli.go /^//START_4/,/^//END_4/ HL4

## Cli library - cli Flags ENV vars

* You can use EnvVars as fallback values for flags
* Set the **`EnvVars`** property on a flag
* The first matching value will be read from the **`EnvVars`** slice

.code examples/08_cli/cli.go /^//START_5/,/^//END_5/ HL5

## Cli library - cli Flags FilePath

* You can also read flags from a file
* Set the **`FilePath`** property on a flag
* FilePath has a highter priority than EnvVars
* Currently supported input source formats: * YAML * JSON * TOML

.code examples/08_cli/cli.go /^//START_6/,/^//END_6/ HL6

## Cli library - cli Commands

* You are able to add commands to your cli application
* Set **`Commands`** in your `cli.App`
  * Commands can also have flags and arguments
* Commands can also have **`Subcommands`**

.code examples/08_cli/cli.go /^//START_7/,/^//END_7/ HL7

## Exercise - Dog fact cli

.image dog-gopher.jpg

.caption Maria Nynfa - https://twitter.com/maria_nynfa/status/1181668007627677699

## Exercise - Dog fact cli

* Build a cli that prints random dog facts
* I suggest you to use the presented cli library, but you are free to also use viper or manual args mapping
* You can 
  * provide a list of dog facts by your own or 
  * use https://kinduff.github.io/dog-api/ (free to use)
* add useful help for your commands and flags
* (optional) - define how many fact you want to have presented in a flag
* (optional) - add a bark command which let's your program bark
* (optional) - all a dog ascii art command

**This is the last exercise of this course, so have fun with it!**

## Libraries to use

## Gin for the web!

* For web servers, I would always pick **`github.com/gin-gonic/gin`**
  * really fast because they built their own ServerMux - read more here https://github.com/julienschmidt/httprouter
  * easy to build routes for http methods (GET; POST, DELETE etc..)

.code examples/09_libs/gin.go HL1

## GORM for SQL

* We went through the sql Golang package and how to use the interface
* If you are looking for a ORM, I suggest GORM https://github.com/go-gorm/gorm

.code examples/09_libs/gorm.go /^//START_1/,/^//END_1/ HL1

## Logging in Go

* **Logrus** is a good standalone logger solution https://github.com/sirupsen/logrus
  * has different formatters, color support, prints callers 

* **uber/zap** https://github.com/uber-go/zap
  * low alloc logging implementation by uber
  * has support for defered logging, when logging is not time critical with `SugaredLogger`

I prefer zap because of its performance and logrus because if its ease of use

## Dependency Injection

* **wire** https://github.com/google/wire
  * compile-time code generation to build the dependency injection graph in Golang

* **uber/fx** https://github.com/uber-go/fx
  * for runtime dependency injection
  * validates graph on application start
  * has a concept for modules

I prefer uber/fx over wire. It allows a more modulized , domain-driven approach

## Build scripts

* Go has no build tool like Maven or Gradle
* If you search for information, you will find a lot of Makefiles, which break the platform-independency of Golang
* I use Taskfile https://taskfile.dev/ for my Golang projects, which work like a lightweight Gradle
  * It prevents you from rerunning tasks, which do not need to be rerun
  * It allows you to map command chains

.code examples/09_libs/taskfile.go

## Testing

* **mockgen** for mock generation https://github.com/golang/mock
* **testify** for testing https://github.com/stretchr/testify provides assertion and test suites

.code examples/09_libs/mock.go HL1

## Config Management

* **godotenv** https://github.com/joho/godotenv 
  * for simple .env file and ENV VAR handling

.code examples/09_libs/godotenv.go /^//START_1/,/^//END_1/ HL1

* **viper** https://github.com/spf13/viper 
  * for complex config management

## Chapter 7 - Go & Python

.image go_vs_python_perf_comp.png 500 900

.caption https://www.guru99.com/python-vs-go.html

## When to use Golang

* Use of concurrency - goroutines
* Readability - depending on who you ask
* (Micro)-Services with REST or gRPC
* Compilable for many platforms

## When to use Python

* Dynamicly typed, faster cold-boot ~ 10-20 %
* Readability - depending on who you ask
* Amount of libraries
* Machine learning
* Django and other full-blown web portals

## Summary

* Learned how Go can communicate with the OS
* Used the http package for server & client
* Created a HTTP server with JWT authentication
* Compared JSON & YAML parsing
* Communicated with MySQL through the SQL interface
* Learned a bit about the Go Context
* Built a Go CLI
* Discussed best practises
* Compared Go & Python

## Q&A

## Le Fin
