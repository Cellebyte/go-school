# Golang Admin Workshop
Learn how to use Golang for tooling
Tags: go, teaching
Summary: German Golang workshop slides.

Matthias Bruns
Freelancer
info@matthiasbruns.com
https://github.com/matthiasbruns
https://www.linkedin.com/in/matthiasbruns/

## Basic Course 1st day

* What did we learn yesterday?
* What was hard to understand or needs a refresher?

.image go-compile.png

## Agenda

* Go and your OS
* HTTP server & client
* JSON & YAML parsing
* SQL interface with MySQL
* Go Context
* Best practises
* Go & Python

## Chapter 1 - Exec on OS

## os package

* https://pkg.go.dev/os
* **`os`** package provides platform-independent interface to operating system functionality

.code examples/01_os/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## os/exec package

* https://pkg.go.dev/os/exec
* **`os/exec`** allows to call scripts and other binaries directly - this may break the platform-independency

.code examples/01_os/exec.go HL1

## Example - Call "ls"

* Calls `ls -lts` 
* Does not work on Windows 

.play examples/01_os/cmd/ls/main.go /^//START_1/,/^//END_1/ HL1

## Exercise - Build a platform-independ ls 

* Do not use **`os/exec`**
  * Use os.Open(dirPath) to get a file pointer
  * Use the file pointer with File.Readdir https://pkg.go.dev/os#File.Readdir
* Log the names of the files containing a folder
* _(optional)_ add the path to the folder via an argument
* _(optional)_ get information like permission from the **`FileInfo`**

## Result - platform-independ ls 

*show in IDE*

## Chapter 2 - HTTP

## HTTP Server

* Spins up a http server with two routes
  * http://localhost:8090/hello
  * http://localhost:8090/headers
* Allows all methods: GET, POST, ....

.play examples/02_http/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## HTTP Server II

* http.ListenAndServe(":8090", nil) - why is the handler set to **`nil`**?
  * "The handler is usually nil, which means to use DefaultServeMux"
* What is a ServeMux?
  * ServeMux is an HTTP request multiplexer
  * Matches an incomming request against the configured patterns and calls the one that most closely matches the url
  * There are many other ServerMux implementations in the standard lib

## HTTP Client

* Issue an HTTP GET request to a server. 
* **`http.Get`** is a quick way to create an http.Client - uses http.DefaultClient
* Uses `bufio` to read the response data
  * Package bufio implements buffered I/O

.play examples/02_http/cmd/client/main.go /^//START_1/,/^//END_1/ HL1

## http package

* Enfore a certain http method by checking the incoming request

.code examples/02_http/method.go HL1

* If you need custom headers for http.Client, instantiate your own 

.code examples/02_http/client.go HL1

## Basic Auth

* Blocks public access from the web resource
* Can be read via **`request.BasicAuth()`**
* If the auth header is not a Basic Auth header,  **`ok`** will be **`false`**
* You have to validate username & password by yourself

.code examples/02_http/basic_auth.go HL1

## JWT Auth

* JWT stands for JSON Web Token
* JWT example **`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ.2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54`**
* The first part is the header **`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9`**
  * specifies information like the algorithm used to generate the signature
* The second part is the payload **`eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ`**
  * contains application specific information
  * information about the expiry and validity of the token
* The third part is the signature **`2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54`**
  * generated by combining and hashing the first two parts along with a secret key
* header and payload are not encrypted

## JWT creation algorithm

* Encode Header and Payload with BASE64
* Concat results and encrypt with secret key = signature

.image examples/02_http/jwt.svg

## JWT validation algorithm

* Validating the JWT on server side can be done in two ways
* Validate **contents** synchronously by recalculating the signature based on the incoming header and payload
  * If calculated signature matched the incoming one, you can be sure, that the payload was not changed
  * If the signature differes the payload was modified
* Validate **authenticity** of the signature by verifying with a corresponding public key
  * Works for keys signed with e.g. RS256 alg

## Using golang-jwt

* We could implement JWT handling manually
* Go allows us to easily reuse open source projects hosted on GitHub.com
* To do so, we need to use Go Modules **`go.mod`**

.code examples/02_http/gomod.go

## Example - Creating tokens

* Creates a token signed with **`SigningMethodHS256`**
* Uses **`customClaims`** with **`json`** representation of values

.code examples/02_http/jwt.go /^//START_1/,/^//END_1/ HL1

## Example - Validating tokens

* Parse with the parsing settings for the selected algorithm
* Verify that the alg is actually one that we expect
* Map the claims just for printing

.code examples/02_http/jwt.go /^//START_2/,/^//END_2/ HL2

## Exercise - Create own auth server

* Create a new project folder and create a new project with 
> **`go mod init PROJECT_NAME`** 
* Add **`github.com/golang-jwt/jwt/v4`** to you go project with 
> **`go get github.com/golang-jwt/jwt/v4`**
* Start by adding simple endpoints to check that your http server is working correctly
* Add two endpoints, one to login and one for protected content
  * **`login`** should generate a jwt token
  * **`protected`** should validate the token and check for a claim "admin" that must be set  

## Result - Create own auth server

*show in IDE*

## Chapter 3 - Parsing

## JSON parsing

* **`encoding/json`** provides functionality for json handling
* you can parse raw json, files, requests or other streams

.code examples/03_json/raw.go HL1

## JSON - Structured data

* "Structured data" refers to data where you know the format beforehand

.code examples/03_json/structured.go /^//START_1/,/^//END_1/ HL1

* Create a struct that mirrors the data you want to parse
* Struct fields must be public in order for unmarshal

.code examples/03_json/structured.go /^//START_2/,/^//END_2/ HL2

* Unmarschal as following

.code examples/03_json/structured.go /^//START_3/,/^//END_3/ HL3

## JSON - Arrays

* Let's look how we can decode a json array

.code examples/03_json/arrays.go /^//START_1/,/^//END_1/ HL1

* Unmarshal it by creating a slice of birds

.code examples/03_json/arrays.go /^//START_2/,/^//END_2/ HL2

## JSON - Nested Objects

* What about nested json objects?

.code examples/03_json/nested.go /^//START_1/,/^//END_1/ HL1

* Create corresponding structs

.code examples/03_json/nested.go /^//START_2/,/^//END_2/ HL2


## JSON - Nested Objects II

* Unmarshal json data into struct and nested struct

.code examples/03_json/nested.go /^//START_3/,/^//END_3/ HL3


## JSON - JSON tags

* Go maps attribute names to case-insensitive json names
* If you want to map attributes to different names, use **`json tags`**

.code examples/03_json/tags.go /^//START_1/,/^//END_1/ HL1

* **`birdType`** should be mapped to **`Species`**
* **`what it does`** should be mapped to **`Description`**

.code examples/03_json/tags.go /^//START_2/,/^//END_2/ HL2

## JSON - Unstructured data

* If you do not know the JSON structure beforehand, you cannot use structs to unmarschal the data
* You can use maps to parse unstructures JSON data
  * Objects and nested objects will be mapped to **`map[string]interface{}`**

.play examples/03_json/cmd/unstructured/main.go /^//START_1/,/^//END_1/ HL1

## JSON - Marschaling data

* Use **`json.Marshal`** to transform structs or maps into json data
* You can use **`omitempty`** to leave out a property completely when empty

.play examples/03_json/cmd/marschal/main.go /^//START_1/,/^//END_1/ HL1

## YAML parsing

* An external package is required to parse YAML files 
> **`go get gopkg.in/yaml.v3`**
* Source code is available at https://github.com/go-yaml/yaml

## YAML parsing II

* Parsing unstructured YAML data may look like this

.code examples/04_yaml/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## YAML parsing III

* Parsing unstructured YAML data may look like this

.code examples/04_yaml/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

## Exercise - Read & log YAML file 

* Write a program that reads a YAML file and logs its contents
* You can use **`ioutil.ReadFile`** from the package **`io/ioutil`** to read a file
* As an example for the file contents, you can use this snippet

.code examples/04_yaml/exercise.yaml

## Result - Read & log YAML file 

*show in IDE*

## Chapter 4 - SQL

## database/sql package

"Package sql provides a generic interface around SQL (or SQL-like) databases"

* The sql package must be used in conjunction with a database driver
* Supported drivers can be found here 
> https://github.com/golang/go/wiki/SQLDrivers

.code examples/05_sql/import.go HL1

## SQL Interface

* How to connect to a database?

.code examples/05_sql/intro.go /^//START_1/,/^//END_1/ HL1

* How to execute queries?

.code examples/05_sql/intro.go /^//START_2/,/^//END_2/ HL2

- ...but what is **`ctx`**?

## Excurse - Golang Context

## What is Context?

* The Go Context
  * carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes
  * accepts values that you can add to it - e.g. meta data for the current scope
* When a Context is canceled, all Contexts derived from it are also canceled.

.code examples/06_context/excurse.go HL1

## SQL cont.

## SQL Interface II 

* How to execute queries?

* ExecContext is used for queries where no rows are returned
* result contains the last insert ID and number of rows affected

.code examples/05_sql/intro.go /^//START_2/,/^//END_2/ HL2

## SQL Interface III

* **`QueryContext`** is used to fetch data from the database

.code examples/05_sql/intro.go /^//START_3/,/^//END_3/ HL3

## SQL Interface IV

* **`QueryRowContext`** is used when you expect only one row as a result (findById)

.code examples/05_sql/intro.go /^//START_4/,/^//END_4/ HL4

* Prepared statements can be created with **`PrepareContext`**

.code examples/05_sql/intro.go /^//START_5/,/^//END_5/ HL5

## SQL Transactions

* Transactions are started with BeginTx

.code examples/05_sql/intro.go /^//START_6/,/^//END_6/ HL6

* `ExecContext`, `QueryContext`, `QueryRowContext` and `PrepareContext` methods already covered can be used in a transaction
* A transaction must end with a call to **`Commit`** or **`Rollback`**

## Connection Pools

* sql.DB already contains a backing connection pool by default
* If you need to change the config
  * **`SetMaxOpenConns`**: sets the maximum number of open connections to the database
  * **`SetMaxIdleConns `**: sets the maximum number of connections in the idle connection pool (default is 2)
  * **`SetConnMaxIdleTime`**: sets the maximum amount of time a connection may be idle
  * **`SetConnMaxLifetime`**: sets the maximum amount of time a connection may be reused

## Example MySQL

* Opens a connection on localhost:3306 to schema goschool with root:mypassword as user:password

.code examples/05_sql/mysql.go HL1

## Live Coding - MySQL

.image coding-gopher.gif

.caption Kirael Art - https://kirael-art.deviantart.com/art/Go-lang-Mascot-458285682

## Chapter 5 - Testing

## Built-In Testing

* Testing is a very important process in developing maintainable software
* Golang has built-in testing support with the **`testing`** package
* A test is defined by
> `func TestSomething(t *testing.T)`

.code examples/07_testing/intro.go /^//START_1/,/^//END_1/ HL1

## Table-Driven Testing

* Some tests may require many input and output Variables
* Instead of copying the tests, Go offers so called "table-driven" tests

.code examples/07_testing/intro.go /^//START_2/,/^//END_2/ HL2

## Benchmark Testing

* The **`testing`** package also provides a way to benchmark implementations
* Benchmark functions start with `Benchmark` not `Test`
* Benchmark functions are run several times by the testing package
* Each benchmark must execute the code under test `b.N` times

> `go test -bench=.`

.code examples/07_testing/intro.go /^//START_3/,/^//END_3/ HL3

## Live Testing

.image testing-gopher.svg

.caption Illustration by Marcus Olsson CC BY-NC-SA 4.0

## Chapter 6 - CLI

## Recap - CLI

* Read args with **`os.Args`**
* The first entry is always the program
* This can be enough to build you own cli tool

.code examples/08_cli/intro.go /^//START_1/,/^//END_1/ HL1

## Recap - CLI libraries

* You could parse flags and values by yourself and validate if the input is correct
* ... but there are libraries for that

## Cli library - Cobra

https://github.com/spf13/cobra

* POSIX-compliant flags
* Nested subcommands
* Global, local and cascading flags
* Intelligent suggestions (app srver... did you mean app server?)
* Automatic help generation for commands and flags
* Automatic help flag recognition of -h, --help, etc.
* Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)

## Cli library - cli

https://github.com/urfave/cli

cli is a simple, fast, and fun package for building command line apps in Go. The goal is to enable developers to write fast and distributable command line applications in an expressive way

.code examples/08_cli/cli.go /^//START_1/,/^//END_1/ HL1

## Cli library - cli II

* If you finish you cli project and want to store it into your $PATH, you can either
  * compile it with **`go build`** and move the compiled binary into your path
  * install any Go project into your **`$GOPATH/bin`** with **`go install`**

* How to read args in cli?

.code examples/08_cli/cli.go /^//START_2/,/^//END_2/ HL2


## Cli library - cli Flags

* You can define flags with defaults and read their values
* Call **`c.String("lang")`** on **`cli.Context`** to get mapped flag args

.code examples/08_cli/cli.go /^//START_3/,/^//END_3/ HL3


## Cli library - cli Flags II

* You can also define a destination where the flag should be stored in

.code examples/08_cli/cli.go /^//START_4/,/^//END_4/ HL4

## Cli library - cli Flags ENV vars

* You can use EnvVars as fallback values for flags
* Set the **`EnvVars`** property on a flag
* The first matching value will be read from the **`EnvVars`** slice

.code examples/08_cli/cli.go /^//START_5/,/^//END_5/ HL5

## Cli library - cli Flags FilePath

* You can also read flags from a file
* Set the **`FilePath`** property on a flag
* FilePath has a highter priority than EnvVars
* Currently supported input source formats: * YAML * JSON * TOML

.code examples/08_cli/cli.go /^//START_6/,/^//END_6/ HL6

## Cli library - cli Commands

* You are able to add commands to your cli application
* Set **`Commands`** in your `cli.App`
  * Commands can also have flags and arguments
* Commands can also have **`Subcommands`**

.code examples/08_cli/cli.go /^//START_7/,/^//END_7/ HL7

## Exercise - Dog fact cli

.image dog-gopher.jpg

.caption Maria Nynfa - https://twitter.com/maria_nynfa/status/1181668007627677699

## Exercise - Dog fact cli

* Build a cli that prints random dog facts
* I suggest you to use the presented cli library, but you are free to also use viper or manual args mapping
* You can 
  * provide a list of dog facts by your own or 
  * use https://kinduff.github.io/dog-api/ (free to use)
* add useful help for your commands and flags
* (optional) - define how many fact you want to have presented in a flag
* (optional) - add a bark command which let's your program bark
* (optional) - all a dog ascii art command

**This is the last exercise of this course, so have fun with it!**

## Libraries to use

## Gin for the web!

* For web servers, I would always pick **`github.com/gin-gonic/gin`**
  * really fast because they built their own ServerMux - read more here https://github.com/julienschmidt/httprouter
  * easy to build routes for http methods (GET; POST, DELETE etc..)

.code examples/09_libs/gin.go HL1

## GORM for SQL

* We went through the sql Golang package and how to use the interface
* If you are looking for a ORM, I suggest GORM https://github.com/go-gorm/gorm

.code examples/09_libs/gorm.go /^//START_1/,/^//END_1/ HL1

## Logging in Go

* **Logrus** is a good standalone logger solution https://github.com/sirupsen/logrus
  * has different formatters, color support, prints callers 

* **uber/zap** https://github.com/uber-go/zap
  * low alloc logging implementation by uber
  * has support for defered logging, when logging is not time critical with `SugaredLogger`

I prefer zap because of its performance and logrus because if its ease of use

## Dependency Injection

* **wire** https://github.com/google/wire
  * compile-time code generation to build the dependency injection graph in Golang

* **uber/fx** https://github.com/uber-go/fx
  * for runtime dependency injection
  * validates graph on application start
  * has a concept for modules

I prefer uber/fx over wire. It allows a more modulized , domain-driven approach

## Build scripts

* Go has no build tool like Maven or Gradle
* If you search for information, you will find a lot of Makefiles, which break the platform-independency of Golang
* I use Taskfile https://taskfile.dev/ for my Golang projects, which work like a lightweight Gradle
  * It prevents you from rerunning tasks, which do not need to be rerun
  * It allows you to map command chains

.code examples/09_libs/taskfile.go

## Testing

* **mockgen** for mock generation https://github.com/golang/mock
* **testify** for testing https://github.com/stretchr/testify provides assertion and test suites

.code examples/09_libs/mock.go HL1

## Config Management

* **godotenv** https://github.com/joho/godotenv 
  * for simple .env file and ENV VAR handling

.code examples/09_libs/godotenv.go /^//START_1/,/^//END_1/ HL1

* **viper** https://github.com/spf13/viper 
  * for complex config management

## Chapter 7 - Go & Python

.image go_vs_python_perf_comp.png 500 900

.caption https://www.guru99.com/python-vs-go.html

## When to use Golang

* Use of concurrency - goroutines
* Readability - depending on who you ask
* (Micro)-Services with REST or gRPC
* Compilable for many platforms

## When to use Python

* Dynamicly typed, faster cold-boot ~ 10-20 %
* Readability - depending on who you ask
* Amount of libraries
* Machine learning
* Django and other full-blown web portals

## Question from day 1

## Summary

* Learned how Go can communicate with the OS
* Used the http package for server & client
* Created a HTTP server with JWT authentication
* Compared JSON & YAML parsing
* Communicated with MySQL through the SQL interface
* Learned a bit about the Go Context
* Built a Go CLI
* Discussed best practises
* Compared Go & Python

## Q&A

## Le Fin

Feedback **https://bit.ly/go-school-2022** *or https://forms.gle/HRnQUyQwurmCpVb38*

.image mic-drop.png 500 500