# Golang Workshop
Getting started with Golang and the standard library
Tags: go, teaching
Summary: German Golang workshop slides.

Matthias Bruns
Freelancer
info@matthiasbruns.com
https://github.com/matthiasbruns
https://www.linkedin.com/in/matthiasbruns/

## Chapter 1 - Introduction

## Why Go?

TODO - Add why go is great

* No OOP

## When to use Golang

services, micro-services, tooling, automation, concurrency, heavy work, embedded

## When not to use Golang

gui, full-blown-web-portals, ai

## Supported Platforms

$GOOS & $GOARCH in `go env` [Go Env Referenz](https://go.dev/doc/install/source#environment)

## Chapter 2 - Setup

## Installing Go

> Detailed instructions can be found here: [https://go.dev/doc/install](https://go.dev/doc/install)

- Windows
  - Download installer: [https://go.dev/dl/go1.18.2.windows-amd64.msi](https://go.dev/dl/go1.18.2.windows-amd64.msi)

- Mac
  - Install via homebrew
  - `brew install go`

- Linux
  - use Snap
  - apt (installs v 1.13)
  - download the binary directly

Now you can run a simple programm with `go run .`

## IDEs

* Visual Studio Code - [https://code.visualstudio.com/](https://code.visualstudio.com/)
  * Free & Open Source
  * Official Golang Extensions by Google

* Jetbrains GoLand - [https://www.jetbrains.com/go/](https://www.jetbrains.com/go/)
  * Paid ~200€/year
  * Best IDE in the market

## Chapter 3 - Go by example

## Hello World
Every programming language needs a **"Hello world!"** example.

Open in Go Playground [https://go.dev/play/p/2rie-h786WN](https://go.dev/play/p/2rie-h786WN)

.play examples/00_helloworld/main.go

## Go Playground Limitations

- Only usable for simple exampels
- No IO opterations except stdin & stdout
- [https://replit.com](https://replit.com) as a more sophisticated alternative

## Program skeleton

.code examples/01_skeleton/main.go

* Go code is grouped in packages
* The “main” package is reserved for the main function
* The main function does not accept parameters and is the entry point in every go program
* The program ends when the end of main is reached

## Examples: Reading command arguments

TODO
* How to read args from main, when main does not have params?
* Introduce other source files & packages
* Introduce testing

.code examples/02_cli/cmd/main.go 

## Chapter 4 - Basics

## Functions

* Functions can take zero or more arguments
* The type comes _after_ the variable name

.play examples/03_functions/cmd/functions/main.go /^//START_1/,/^//END_1/ HL1

## Functions cont. I

* two or more consecutive named function parameters share a type, omit all types but the last
* `x int, y int` -> `x, y int`

.code examples/03_functions/cmd/functions/main.go /^//START_2/,/^//END_2/ HL2

## Functions cont. II

* function can return any number of results

.play examples/03_functions/cmd/swap/main.go /^//START_1/,/^//END_1/ HL1

## Variables

* `var` statement can be at package or function level

.play examples/04_variables/cmd/intro/main.go HL1

## Variables cont. I

* `var` declaration can include initializers, one per variable
* if an initializer is present, the type can be omitted
  * the variable will take the type of the initializer

.play examples/04_variables/cmd/initializers/main.go /^//START_1/,/^//END_1/ HL1

## Variables cont. II

* the `:=` short assignment statement can be used in place of a var declaration with implicit type
* Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available

.code examples/04_variables/cmd/initializers/main.go /^//START_2/,/^//END_2/ HL2

## Basic types

* int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems
* when you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type

.code examples/05_basic_types/types.go

## Basic types - Zero values

* The zero value is:
  * 0 for numeric types,
  * false for the boolean type, and
  * "" (the empty string) for strings.

.code examples/05_basic_types/zero.go /^//START_1/,/^//END_1/ HL1

## Basic types - Type conversions

* you can e.g. convert int to float64
* and convert it back to uint
* Go assignment between items of different type requires an explicit conversion

.code examples/05_basic_types/conversions.go

## Basic types - Type inference

When the right hand side of the declaration is typed, the new variable is of that same type

.code examples/05_basic_types/inference.go /^//START_1/,/^//END_1/

When the right hand side contains an untyped numeric constant, the new variable may be an int, float64, or complex128

.code examples/05_basic_types/inference.go /^//START_2/,/^//END_2/

## Basic types - Constants

* `const` in package or function
* *must* be assigned with `=`

.play examples/05_basic_types/cmd/constants/main.go HL1

## Chapter 5 - Control structures

## Loops

* iterate and repeat program snippets
* Go only has the keyword **`for`** - no `while` or `foreach` keywords
* the init and post statements are optional

.play examples/06_loops/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Loops - "other" loops

* Go does not have a `while` keyword
* Simply use `for` with only a condition

.code examples/06_loops/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

* for endless loops use for without a condition

.code examples/06_loops/cmd/intro/main.go /^//START_3/,/^//END_3/ HL3

## If-Statements

* allows branching code based on conditions
* the expression need not be surrounded by parentheses **`( )`**
* the braces **`{ }`** are required

.play examples/07_if/cmd/intro/main.go  /^//START_1/,/^//END_1/ HL1

## If - Short Statements

* Assign the result of a call to **`v`** within the if statement
* Variables declared by the statement are only in scope until the end of the if

.code examples/07_if/cmd/intro/main.go  /^//START_2/,/^//END_2/ HL2

## If-else

* If the condition of if is **`false`**, the optional **`else`** block will run

.code examples/07_if/cmd/intro/main.go  /^//START_3/,/^//END_3/ HL3

## Switch

* **`switch`** statement is a shorter way to write a sequence of **`if`** - **`else`** statements
* No "fall-through"; Go only runs the matching case
* Case values do not need to be consts or ints
* Cases evaluated from top to bottom
* **`default`** case as fallback

.play examples/08_switch/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Defer

* **`defer`** defers the exection until the end of the function

.play examples/09_defer/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

* multiple **`defers`** will be stacked and exected in last-in-first-out order

.play examples/09_defer/cmd/stacked/main.go /^//START_1/,/^//END_1/ HL1

## Chapter 6 - Pointers & Structs

## Pointers

* pointer holds the memory address of a value
* type **`*T`** is a pointer to a **`T`** value. Its zero value is **`nil`**
* **`&`** operator generates a pointer to a variable
* **`*`** operator dereferences the value of underlying pointer
* unlike C, Go has no pointer arithmetic

.play examples/10_pointers/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Structs

* Go does not have **`classes`** but **`structs`**
* a **`struct`** is a collection of fields

.play examples/11_structs/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Struct Pointers

* Struct fields can be accessed through a struct pointer
* Go enables a shortcut of accessing  X on the struct
  * We would have to write **`(*p).X`**
  * We can access it through **`p.X`**

.play examples/11_structs/cmd/pointers/main.go /^//START_1/,/^//END_1/ HL1

## Initializing Structs

.play examples/11_structs/cmd/initialize/main.go /^//START_1/,/^//END_1/ HL1

## Chapter 7 - Arrays, Slices & Maps

## Arrays

TODO: summarize https://go.dev/tour/moretypes/6

## Slices Intro

TODO: summarize https://go.dev/tour/moretypes/7

## Slices vs Arrays

TODO: summarize https://go.dev/tour/moretypes/8

## Creating slices

TODO: summarize https://go.dev/tour/moretypes/8 - https://go.dev/tour/moretypes/15

## Mutating  slices

TODO: summarize https://go.dev/tour/moretypes/8 - https://go.dev/tour/moretypes/15

## Iterating with range

TODO: summarize https://go.dev/tour/moretypes/16 - https://go.dev/tour/moretypes/18

## Creating Maps

TODO: summarize https://go.dev/tour/moretypes/19 - https://go.dev/tour/moretypes/21

## Mutating Maps

TODO: summarize https://go.dev/tour/moretypes/19 - https://go.dev/tour/moretypes/21

## Chapter 8 - Structs and Methods

## Add methods to structs

TODO: summarize https://go.dev/tour/methods/1 - https://go.dev/tour/methods/8

## Value vs pointer receiver

bla

## Interfaces
TODO: summarize https://go.dev/tour/methods/9 - https://go.dev/tour/methods/17

## No implements keyword

bla

## Nil receiver

bla

## Empty interface{}

bla

## Type assertions

bla

## Example interface fmt.Stringer

bla

## Chapter 9 - Errors

## Chapter 10 - Generics

## Chapter 11 - Goroutines

## Threads vs Goroutines

details

## Coroutines
 * intro `go` keyword
 * show what happens when we do not wait for it

## Channels

details

## Waiting for channels

TODO: summarize https://go.dev/tour/concurrency/9 - https://go.dev/tour/concurrency/10

## Sync with Mutex

code example

## Sync with WaitGroups

code example