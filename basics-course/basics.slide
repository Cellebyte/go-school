# Golang Workshop
Getting started with Golang and the standard library
Tags: go, teaching
Summary: German Golang workshop slides.

Matthias Bruns
Freelancer
info@matthiasbruns.com
https://github.com/matthiasbruns
https://www.linkedin.com/in/matthiasbruns/

## /whoami

.image hype.jpg 600 600

## Matthias Bruns

* Married, three children and a french bulldog
* Developer since 2011
* Worked with JEE & Spring, Android, Node and Golang
* Founder of happyann.de (Backend written in Golang)
* Worked with eBay, Fressnapf, IBM, REWE, RTL, etc..
* Clean Architecture & Testing Evangelist
* Currently learning: Rust

## /whoareyou?

.image share.png 600 600

## Agenda

* Why Golang?
* Installing Golang
* Intruduction by Example
* Golang Basics
* Control structures
* Pointers & Structs
* Arrays, Slices and Maps
* Structs and Methods
* Errors in Go
* Generics
* Goroutines - Concurrency in Go

## Chapter 1 - Introduction

## Why Go?

* Simple code
* Created for large projects
* Easy to learn
* One problem – one solution
* Designed for multi-core processors
* Quick compilation
* Small application size
* Limited OOP
* Completely open source - https://cs.opensource.google/go/go;l=2268

## Who uses Golang

* Google - Chrome & Earth, YouTube and Search Engine
* Uber - https://github.com/uber-go
* CoreOS systemd https://github.com/coreos/go-systemd
* SoundCloud
* Twitch - heavy loaded systems
* SendGrid  - Cloud Mail

## When to use Golang

* web services
* micro-services
* tooling & automation
* concurrency & heavy work
* embedded

## When not to use Golang

* gui
* full-blown-web-portals & SSR
* ML & GPU work

## Supported Platforms

$GOOS & $GOARCH in `go env` [Go Env Referenz](https://go.dev/doc/install/source#environment)

## Chapter 2 - Setup

## Installing Go

> Detailed instructions can be found here: [https://go.dev/doc/install](https://go.dev/doc/install)

- Windows
  - Download installer: [https://go.dev/dl/go1.18.2.windows-amd64.msi](https://go.dev/dl/go1.18.2.windows-amd64.msi)

- Mac
  - Install via homebrew
  - `brew install go`

- Linux
  - use Snap
  - apt (installs v 1.13)
  - download the binary directly

Now you can run a simple programm with `go run .`

## IDEs

* Visual Studio Code - [https://code.visualstudio.com/](https://code.visualstudio.com/)
  * Free & Open Source
  * Official Golang Extensions by Google

* Jetbrains GoLand - [https://www.jetbrains.com/go/](https://www.jetbrains.com/go/)
  * Paid ~200€/year or community edition of IntelliJ IDE with the official plugin
  * Best IDE in the market

## Exercise: Install Golang 

* Detailed instructions can be found here: [https://go.dev/doc/install](https://go.dev/doc/install)
* Do **not** install 1.13 from apt on Linux, this will be too old

.image setup-gopher.jpg 400 400
.caption Maria Nynfa https://twitter.com/maria_nynfa/status/1181344478818394112

## Chapter 3 - Go by example

## Hello World
Every programming language needs a **"Hello world!"** example.

Open in Go Playground [https://go.dev/play/p/2rie-h786WN](https://go.dev/play/p/2rie-h786WN)

.play examples/00_helloworld/main.go

.image hello_world.png 233 400

## Program skeleton

.code examples/01_skeleton/main.go

* Go code is grouped in packages
* The “main” package is reserved for the main function
* The main function does not accept parameters and is the entry point in every go program
* The program ends when the end of main is reached

## Examples: Reading command arguments

* How to read args from main, when main does not have params?
* Package "os" to read args
* os.Args[0] is always the executable itself

.code examples/02_cli/cmd/main.go 

## Exercise: Hello, Matthias!

- Write a simple Go program that outputs "Hello, Matthias!"
  - Create a main.go file with a `main` function inside
  - use "`fmt.Println`" to print text to the console
- Execute the code by running "`go run .`" in the terminal while being in the work directory

## Result - Hello, Matthias!

*show in IDE*

## Chapter 4 - Basics

.image go-hike.png 500 700
.caption https://betterprogramming.pub/how-to-write-generic-helper-functions-with-go-d47c52986016

## main

* The "`main`" function is the starting point of every Go program
* A program can have multiple main function in its source code
  * Compiled binaries still only have one "`main`" function

.image cmds.png _ 300

* "`go run cmd/dev/main.go`" runs the `main.go` in `cmd/dev`
* "`go build -o bin/aws_hello cmd/aws_hello/main.go`"
  * compiles `cmd/aws_hello/main.go` into `bin/aws_hello`

## Functions

* Functions can take zero or more arguments
* The type comes _after_ the variable name

.play examples/03_functions/cmd/functions/main.go /^//START_1/,/^//END_1/ HL1

## Functions cont. I

* two or more consecutive named function parameters share a type, omit all types but the last
* `x int, y int` -> `x, y int`

.code examples/03_functions/cmd/functions/main.go /^//START_2/,/^//END_2/ HL2

## Functions cont. II

* function can return any number of results

.play examples/03_functions/cmd/swap/main.go /^//START_1/,/^//END_1/ HL1

## Variables

* `var` statement can be at package or function level

.play examples/04_variables/cmd/intro/main.go HL1

## Variables cont. I

* `var` declaration can include initializers, one per variable
* if an initializer is present, the type can be omitted
  * the variable will take the type of the initializer

.play examples/04_variables/cmd/initializers/main.go /^//START_1/,/^//END_1/ HL1

## Variables cont. II

* the `:=` short assignment statement can be used in place of a var declaration with implicit type
* Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available

.code examples/04_variables/cmd/initializers/main.go /^//START_2/,/^//END_2/ HL2

## Basic types

* int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems
* when you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type

.code examples/05_basic_types/types.go

## Basic types - Zero values

* The zero value is:
  * 0 for numeric types,
  * false for the boolean type, and
  * "" (the empty string) for strings.

.code examples/05_basic_types/zero.go /^//START_1/,/^//END_1/ HL1

## Basic types - Type conversions

* you can e.g. convert int to float64
* and convert it back to uint
* Go assignment between items of different type requires an explicit conversion

.play examples/05_basic_types/cmd/conversions/main.go

## Basic types - Type inference

When the right hand side of the declaration is typed, the new variable is of that same type

.code examples/05_basic_types/inference.go /^//START_1/,/^//END_1/

When the right hand side contains an untyped numeric constant, the new variable may be an int, float64, or complex128

.code examples/05_basic_types/inference.go /^//START_2/,/^//END_2/

## Basic types - Constants

* `const` in package or function
* *must* be assigned with `=`

.play examples/05_basic_types/cmd/constants/main.go HL1

## Chapter 5 - Control structures

## Loops

* iterate and repeat program snippets
* Go only has the keyword **`for`** - no `while` or `foreach` keywords
* the init and post statements are optional

.play examples/06_loops/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

.image go-loop.jpg


## Loops - "other" loops

* Go does not have a `while` keyword
* Simply use `for` with a condition

.code examples/06_loops/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

* for endless loops use for without a condition

.code examples/06_loops/cmd/intro/main.go /^//START_3/,/^//END_3/ HL3

## If-Statements

* allows branching code based on conditions
* the expression need not be surrounded by parentheses **`( )`**
* the braces **`{ }`** are required

.play examples/07_if/cmd/intro/main.go  /^//START_1/,/^//END_1/ HL1

## If - Short Statements

* Assign the result of a call to **`v`** within the if statement
* Variables declared by the statement are only in scope until the end of the if

.code examples/07_if/cmd/intro/main.go  /^//START_2/,/^//END_2/ HL2

## If-else

* If the condition of if is **`false`**, the optional **`else`** block will run

.code examples/07_if/cmd/intro/main.go  /^//START_3/,/^//END_3/ HL3

## Switch

* **`switch`** statement is a shorter way to write a sequence of **`if`** - **`else`** statements
* No "fall-through"; Go only runs the matching case
* Case values do not need to be consts or ints
* Cases evaluated from top to bottom
* **`default`** case as fallback

.play examples/08_switch/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Defer

* **`defer`** defers the exection until the end of the function

.play examples/09_defer/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

* multiple **`defers`** will be stacked and exected in last-in-first-out order

.play examples/09_defer/cmd/stacked/main.go /^//START_1/,/^//END_1/ HL1

## Chapter 6 - Pointers & Structs

## Pointers

.play examples/10_pointers/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

.image pointer_intro.png 300 _

## Pointers II

* pointer holds the memory address of a value
* type **`*T`** is a pointer to a **`T`** value. Its zero value is **`nil`**
* **`&`** operator generates a pointer to a variable
* **`*`** operator dereferences the value of underlying pointer
* unlike C, Go has no pointer arithmetic

.play examples/10_pointers/cmd/example/main.go /^//START_1/,/^//END_1/ HL1

## Structs

* Go does not have **`classes`** but **`structs`**
* a **`struct`** is a collection of fields
  * a `Car` has `Doors` and `horse power (HP)`

.play examples/11_structs/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Structs short

* Structs can also be defined inline
* When creating a types collection of structs, you can omit the struct name in the values

.code examples/11_structs/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

## Struct Pointers

* Struct fields can be accessed through a struct pointer
* Go enables a shortcut of accessing  X on the struct
  * We would have to write **`(*p).X`**
  * We can access it through **`p.X`**

.play examples/11_structs/cmd/pointers/main.go /^//START_1/,/^//END_1/ HL1

## Initializing Structs

.play examples/11_structs/cmd/initialize/main.go /^//START_1/,/^//END_1/ HL1

## Chapter 7 - Arrays, Slices & Maps

## Arrays

* Arrays are fixed-sized lists of data

.code examples/12_arrays/intro.go /^//START_1/,/^//END_1/

* array's length is part of its type, so arrays cannot be resized 

.play examples/12_arrays/intro.go /^//START_2/,/^//END_2/ HL2

## Slices

* dynamically-sized
* flexible view into the elements of an array
* slice is formed by specifying two indices, a low and high bound
> `features[low : high]`
* includes the `low` element, but excludes the `high` one.
> `features[1:4]`

.play examples/13_slices/intro.go /^//START_1/,/^//END_1/ HL1

## Slice defaults

* you may omit the high or low bounds to use their defaults instead
* default is 
  * zero for the low bound 
  * the length of the slice for the high bound

For the array 

> `var features [10]string`

these slice expressions are equivalent: 

> `features[0:10], features[:10], features[0:], features[:]`

## Slices & Arrays

* Slices are pointers to arrays
* a slice contains the current length of the slice and the capacity of the underlying array
* when a slice size grows too big, the underlying array needs to be copied into a bigger one

.image examples/13_slices/slice.jpg

## Example - Slices & Arrays

**Q**: What will happen?

.play examples/13_slices/cmd/arraytoslice/main.go /^//START_1/,/^//END_1/  HL1

## Creating slices

* You can create slices without an array
* slice literal is like an array literal without the length

 This is an array literal: 

.code examples/13_slices/literals.go /^//START_1/,/^//END_1/ HL1

 And this creates the same array as above, then builds a slice that references it: 

.code examples/13_slices/literals.go /^//START_2/,/^//END_2/ HL2

## Example - Creating slices

**Q**: What will happen?

.play examples/13_slices/cmd/slices/main.go /^//START_1/,/^//END_1/ HL1

## nil Slices

* since a slice is a pointer to an array, the pointer value can be `nil`
* `nil` slices have a `len` and `cap` of 0 

.play examples/13_slices/cmd/nil/main.go /^//START_1/,/^//END_1/ HL1

## Creating slices with make

* `make` function allocates a zeroed array and returns a slice that refers to that array

.code examples/13_slices/make.go /^//START_1/,/^//END_1/

* to specify a capacity, pass a third argument

.code examples/13_slices/make.go /^//START_2/,/^//END_2/

## Example - make slice

**Q**: What will happen?

.play examples/13_slices/cmd/make/main.go /^//START_1/,/^//END_1/ HL1

## Slices of slices

* Slices can contain other slices

.play examples/13_slices/cmd/slicesofslices/main.go /^//START_1/,/^//END_1/ HL1

## Appending to slices

* Go provides a built-in function **`append`**

.code examples/13_slices/append.go

* First parameter **`s`** of append it the slice with type `T`
* The following parameters are values of `T`, that should be appended
* If the backing array of s is too small to fit all the given values a bigger array will be allocated
* The returned slice will point to the newly allocated array

## Iterating with range

* Looping through a slice can be done with `range`
* Two values are provided each iteration - index and a copy of the element

.play examples/13_slices/cmd/range/main.go /^//START_1/,/^//END_1/ HL1

## Iterating with range II

You can ignore the index or value by setting the variable to `_`

.code examples/13_slices/range.go /^//START_1/,/^//END_1/ HL1

If you only want the index, you can omit the second variable

.code examples/13_slices/range.go /^//START_2/,/^//END_2/ HL2

## Creating Maps with make

* Maps hold a list of key value pairs
* The `zero` value of a map is `nil`
  * has no keys and no keys can be added
* `make` creates a new empty map

.play examples/14_maps/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Map literals

* Maps can be created like structs with literals
* The literals contain a key value pair

.code examples/14_maps/literals.go /^//START_1/,/^//END_1/ HL1

* You can omit struct name "`Car`" while creating the structs in the map literal

.code examples/14_maps/literals.go /^//START_2/,/^//END_2/ HL2

## Mutating Maps

* Insert or update an element in map

.code examples/14_maps/mutate.go /^//START_1/,/^//END_1/ HL1

* Retrieve an element

.code examples/14_maps/mutate.go /^//START_2/,/^//END_2/ HL2

* Delete an element

.code examples/14_maps/mutate.go /^//START_3/,/^//END_3/ HL3

* Test that a key is present with a two-value assignment

.code examples/14_maps/mutate.go /^//START_4/,/^//END_4/ HL4

## Example - Mutating Maps

**Q**: What will happen?

.play examples/14_maps/cmd/mutate/main.go /^//START_1/,/^//END_1/ HL1

## Exercise - Find biggest number in slice

* You have an unsorted slice of numbers - e.g. [4, -3 ,0, 4, 77, 6]
* Iterate over the slice and find the biggest number
* Use a version of **`fmt.Print`** to display the biggest number
* (optional) find the smallest number
* (optional) if there are multiple biggest/smallest numbers, return all indexes of them in a slice

.image search-gopher.jpg 300 _

## Result - Find biggest number in slice

*show in IDE*

## Chapter 8 - Structs and Methods

## Add methods to structs

* Go does not have classes
* You can still "add" methods to structs or type definitions by defining a *receiver*

.play examples/15_methods/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Add methods to structs II

* A method is just a function with a receiver argument
* Written without a struct receiver

.code examples/15_methods/cmd/intro/main.go /^//START_2/,/^//END_2/ HL2

## Pointer receivers


* Define a receiver as a pointer with **`*`**
* Allows the method to modify receiver values

.play examples/15_methods/cmd/pointers/main.go /^//START_1/,/^//END_1/ HL1

## Pointer receivers II

Removing the pointer receiver definition leads to a different result

**Q**: What will happen?

.play examples/15_methods/cmd/nopointers/main.go /^//START_1/,/^//END_1/ HL1

## Methods and pointer indirection

* Functions parameters need to be provided as requested
  * If a function needs a pointer, you cannot provide a value and vice versa

.code examples/15_methods/indirection.go /^//START_1/,/^//END_1/ HL1

* Methods can either be called on a pointer or value

.code examples/15_methods/indirection.go /^//START_2/,/^//END_2/ HL2

Go interprets the statement **`c.Start()`** as **`(&c).Start()`** since the `Start` method has a pointer receiver!

## Value vs pointer receiver

When to chose a value or pointer reciver?

* There are two reasons to use a pointer receiver
  * modify the value that its receiver points to
  * avoid copying the value on each method call

## Interfaces

An interface **`type`** is defined as a set of method signatures

.code examples/16_interface/intro.go /^//START_1/,/^//END_1/ HL1

* Interfaces are implemented implicitly, there is no **`implements`** keyword

.code examples/16_interface/intro.go /^//START_2/,/^//END_2/ HL2

## Interfaces II

* It is important if a receiver is a pointer or value type

.code examples/16_interface/intro.go /^//START_3/,/^//END_3/ HL3

## Example - fmt.Stringer

* **`Stringer`** is defined in the **`fmt`** package 

.code examples/16_interface/stringer.go

* Can be used like **`toString()`** in other programmig languages when working with **`fmt`**

.play examples/16_interface/cmd/stringer/main.go /^//START_1/,/^//END_1/ HL1

## Nil receiver

* if the underlying value of an interface is **`nil`**, the method will be called with a nil receiver
* if not handled within the method, go might **`panic`**

.code examples/16_interface/cmd/nil/main.go /^//START_1/,/^//END_1/ HL1

## Example - nil reciever

**Q**: What will happen?

.play examples/16_interface/cmd/nil/main.go /^//START_2/,/^//END_2/ HL2

## Nil interface values

* If an interface is not initialized, if holds a reference to **`nil`**
* Go will **`panic`** upon calling a method of the interface

.play examples/16_interface/cmd/nilpanic/main.go /^//START_1/,/^//END_1/ HL1

## Empty interface{}

* Handles values of unknown type
* Allows any value to be set to a variable

.play examples/16_interface/cmd/empty/main.go /^//START_1/,/^//END_1/ HL1

## Type assertions

* Used to "cast" **`interface{}`** to the actual type
* Will panic, if the value does not hold the value type that you want to cast to 

This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t. 

.code examples/16_interface/assert.go /^//START_1/,/^//END_1/ HL1

* Test whether an interface value holds a specific type, a type assertion can return two values
* If **`ok`** is false, `t` will be set to its **`zero`** value.

.code examples/16_interface/assert.go /^//START_2/,/^//END_2/ HL2

## Example - Type assertions

**Q**: What is f?

**Q**: Why does it panic?

.play examples/16_interface/cmd/assert/main.go /^//START_1/,/^//END_1/ HL1

## Type switches

* To react to multiple interface{} types, you can switch on the type
* As usual `switch-case`, the checks will be evaluated top to bottom

.play examples/16_interface/cmd/switch/main.go /^//START_1/,/^//END_1/ HL1

## Exercise - Stringers

Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad. 

For instance, IPAddr{1, 2, 3, 4} should print as "1.2.3.4". 

.code examples/16_interface/exercise.go

## Result - Stringers

*show in IDE*

## Chapter 9 - Errors

## Go error

* Go programs express error state with error values
* Functions often return an error value

.code examples/17_errors/intro.go HL1

.image error-go.png _ 300

## Go error II
 
* In a case of an error, a good gopher might do the following
  * handle the error with some retry logic
  * ignore the error and use some fallback
  * return the error to the calling function

## Chapter 10 - Generics

## What are Generics?

* Go functions can be written to work on multiple types using type parameters
* Type parameters of a function appear between brackets, before the function's arguments

.code examples/18_generics/intro.go HL1

## Generic constraints

* s is a slice of any type **`T`** that fulfills the built-in constraint **`comparable`**
* x is also a value of the same type 

*comparable is a useful constraint that makes it possible to use the == and != operators on values of the type*

.code examples/18_generics/constraints.go /^//START_1/,/^//END_1/ HL1

* or constrain T to implement Stringer

.code examples/18_generics/constraints.go /^//START_2/,/^//END_2/ HL2

## Example - Generics constraints

.play examples/18_generics/cmd/intro/main.go /^//START_1/,/^//END_1/ HL1

## Generic contraints cont.

* `comparable` only guarantees that a type supports `==`

.code examples/18_generics/max.go /^//START_1/,/^//END_1/ HL1

* You can design own constrains or use predefined ones from the `constraints` package

.code examples/18_generics/max.go /^//START_2/,/^//END_2/ HL2

## Generic contraints cont.

* Predefined constraints can be found in `golang.org/x/exp/constraints`

.play examples/18_generics/cmd/max/main.go  /^//START_1/,/^//END_1/ HL1

## Generic types

* types can also be generic

.play examples/18_generics/cmd/types/main.go HL1

## Chapter 11 - Goroutines

## What are Goroutines?

"A goroutine is a lightweight thread managed by the Go runtime" - go.dev

.code examples/19_goroutines/intro.go

* Goroutines are function calls starting with **go**
* Goroutines run on the same address space; real threads get a new one managed by the OS
  * access to shared memory must be synchronized
* Goroutines are handled by the Go runtime; threads are being managed by the OS

.image goroutines.jpeg 350 350

## Goroutines vs Threads

.image goroutine.png 500 500

## WaitGroups

* If we run a Goroutine, main won't wait for it
* When the parent Goroutines finishes, the spawned one won't automatically, which will lead to a leak

.play examples/19_goroutines/cmd/nowait/main.go /^//START_1/,/^//END_1/ HL1

## WaitGroups II

* To prevent this, we can use WaitGroups or other locking/synchronization mechanisms

.play examples/19_goroutines/cmd/wait/main.go /^//START_1/,/^//END_1/ HL1

## Channels

* Act like communication pipes between goroutines
* Can be used as a synchronization point between goroutines
  * By default, sends and receives block until the other side is read

.code examples/19_goroutines/channels.go /^//START_1/,/^//END_1/

*The data flows in the direction of the arrow*

Like maps and slices, channels must be created before use: 

.code examples/19_goroutines/channels.go /^//START_2/,/^//END_2/

## Example - Channels

.play examples/19_goroutines/cmd/channels/main.go /^//START_1/,/^//END_1/ HL1

## Buffered Channels

.code examples/19_goroutines/channels.go /^//START_3/,/^//END_3/

* Like channels but with a buffer length
* Sends to a buffered channel block only when the buffer is full
* Receives block when the buffer is empty

.play examples/19_goroutines/cmd/buffered/main.go /^//START_1/,/^//END_1/ HL1

## Range and Close

* A sender can close a channel to indicate that no more values will be sent
* Receivers can test whether a channel has been closed
  * Only the sender should close a channel, never the receiver
  * Channels aren't like files; you don't usually need to close them
* if `ok` is false, the channel is closed  

.code examples/19_goroutines/channels.go /^//START_4/,/^//END_4/

* You can iterate channel values with **`range`**

.code examples/19_goroutines/channels.go /^//START_5/,/^//END_5/

## Example - Range and Close

.play examples/19_goroutines/cmd/range/main.go /^//START_1/,/^//END_1/ HL1

## Select

* **`select`** statement lets a goroutine wait on multiple communication operations
* **`select`** blocks until one of its cases can run
  * It chooses one at random if multiple are ready

## Example - Select

.play examples/19_goroutines/cmd/select/main.go /^//START_1/,/^//END_1/ HL1

## Default Selection

What if we do not want to block until **`select`** triggers?

* Add a default branch wich will be used as fallback is no channel is selected

.code examples/19_goroutines/select.go HL1

## Example - Default Selection

**Q**: Guess what will happen

.play examples/19_goroutines/cmd/default/main.go /^//START_1/,/^//END_1/ HL1

## Mutex

* Good to ensure only one goroutines accesses a variable
* **`sync/atomic`** provides low-level atomic memory primitives 
* **`sync.Mutex`** has two methods
  * Lock
  * Unlock 

.code examples/19_goroutines/cmd/mutex/main.go /^//START_1/,/^//END_1/ HL1

## Example - Mutex

.play examples/19_goroutines/cmd/mutex/main.go /^//START_2/,/^//END_2/ HL2

## Worker Pools

* Worker pools are a used pattern in Golang in combination with Goroutines
* To limit the amount of spawned Goroutines, it is good practise to instantiate `m` workers
* These workers keep working on `n` jobs until they are done
* In the end the results may be collected by the workers

.code examples/19_goroutines/cmd/pool/main.go /^//START_1/,/^//END_1/ HL1

## Worker Pools II

* Define a fixed number of jobs and corresponsing channels for comminucation between coroutines
* "Boot" up the workers

.code examples/19_goroutines/cmd/pool/main.go /^//START_2/,/^//END_2/ HL2

## Worker Pools III

* Send the job data into the job channel
* Close when all jobs where sent
* Collect the results

.code examples/19_goroutines/cmd/pool/main.go /^//START_3/,/^//END_3/ HL3

## Example - Worker Pools

*show in IDE*

.image golang-worker.png 400 600

## Exercise: Goroutines

* Launch multiple Goroutines and each goroutine adding values to a Channel
* Spawn 10 Goroutines
  * Each Goroutine should count from 0 to 10
  * Send the counted value to a channel
* A loop should iterate the channel and output the values in the order it receives them

.image gopher-this-is-fine.jpg

## Example - Goroutines

*show in IDE*

## Summary

* Explained why you should use Golang
* Installed Golang
* Learned Golang Basics
* Used Control structures
* Tried out Pointers & Structs
* Saw the difference between Arrays, Slices and Maps
* Extended Structs with Methods
* Handled Errors in Go
* Heard about Generics
* Played with Goroutines

## Q&A

## Le Fin

.image mic-drop.png 500 500
